名称
    makrj.sh - JSONPath-value形式データをJSONテキストデータに変換

書式
    makrj.sh [JSONPath-value_textfile]

解説
    makrj.shコマンドは、parsrj.shコマンドがJSONデータから変換して生成し
    たJSONPath-value形式テキストデータを逆変換し、元々のJSONデータを復
    元します。JSONPath-valueデータは、<JSONPath-value_textfile>として与
    えるものとし、もしそれが省略されるか`-'だった場合には、標準出力から
    受け取ります。

    JSONPath-value形式は、JSONデータを各種UNIXコマンドやTukubaiコマンド
    で処理するのに向いています。そこでJSONデータに対し、値の修正、ある
    いは追加・削除を施したい場合には、一旦parsrj.shコマンドでこの形式に
    変換し、それに対して編集・追加・削除を行ったうえで、本コマンドで逆
    変換をすれば、それが簡単に実現できるようになります。

    なお、JSONPath-value形式の詳細についてはparsrj.shコマンドのマニュア
    ルを、また、そこで言及されるJSONPathについては次のページを参照して
    ください。
    http://goessner.net/articles/JsonPath/

注意
    JSONPath-value形式データからJSONデータを生成する場合には、注意しな
    ければならない事項が3つあります。

    その1。JSONPath-valueのvalue列として、数値やブール値(`true'または
    `false')や未定義値`null'を意味するこれらの文字列が与えられた場合、
    このコマンドはて、それらの型のデータと見なされるようなJSONデータを
    生成します。それらのどれにも該当しなかった場合には気を利かせて文字
    列型であると解釈しますが、確実に文字列型として解釈されることを望む
    場合にはvalueをダブルクォーテーションで囲ってください。

    その2。parsrj.shによってJSONPath-value形式データを生成した場合は、
    それら各行の並び順が変わらないようにしてください。また、新規にJSON-
    Path-value形式の行を追加する場合には、同一階層の行が必ず隣り合うよ
    うに、かつ配列要素に関しては並べたい順番になるように行を挿入してく
    ださい。これは、本コマンドが逐次実行でJSONデータを生成するという仕
    様に起因するものです。具体的に言えば、本コマンドは、一行一行読み込
    むたびにJSONPathが相対的にどう変化していくかによって、JSONの括弧類
    の記号を発行を行っているからです。もし、同じ階層の配列要素を追加し
    たくてJSONPath-value形式データの最後の行に追記したものを本コマンド
    に掛けてしまうと、生成されるJSONデータとしては一度配列を閉じたうえ
    で、別の場所に同様の階層が掘られたものができあがってしまいます。

    (その2の仕様を考慮しない間違った使用例)
    {"fooarray":["a","b"],"bararray":["A","B"]}
      ｜
      ｜(parsrj.shで変換)
      ↓
    $.fooarray[0] "a"
    $.fooarray[1] "b"
    $.bararray[0] "A"
    $.bararray[1] "B"
      ｜
      ｜(fooarray配列に要素"c"を追加しようとして、行末に書いてしまう)
      ↓
    $.fooarray[0] "a"
    $.fooarray[1] "b"
    $.bararray[0] "A"
    $.bararray[1] "B"
    $.fooarray[2] "c"      ←正しくは、$.fooarray[1] の次の行に挿入する
      ｜
      ｜(makrj.shで逆変換)
      ↓
    {                      ←このJSONは、JSON文法上も違反である。
    "fooarray":["a","b"],    "fooarray"という同名オブジェクトが、
    "bararray":["A","B"],    同じ階層に複数回出現しているため。
    "fooarray":["c"]
    }

    その3。本コマンドは、注意点その2で述べた逐次処理という仕様上の理由
    から、JSONPathにある配列[n]の添え字(番号)を無視します。つまり、[n]
    の中にどんな整数が書かれていても、同階層の配列であれば、最初に出現
    したものを[0]、次の出現したものを[1]、……と見なします。この性質は
    保証されていますので、利用して構いません。この性質を利用すれば、上
    記の例において `$.fooarray[2] "c"' を `$.fooarray[0] "a"' の 次の行
    に挿入して逆変換することにより、`["a","c","b"]' という並びの配列を
    できます。全ての配列要素の添え字をわざわざ付け直す必要がないため、
    便利です。

補足
    unescj.shの逆変換に相当するコマンドは、2018-02-14現在制作されていま
    せん。実在する多くのWeb APIがエスケープしなくても受け入れられるよう
    になっており、現段階では必要性が高くないからです。

関連項目
    parsrj.sh
